def fair_sharer(values, num_iterations, share=0.1):
    """Runs num_iterations.
    In each iteration the highest value in values gives a fraction (share)
    to both the left and right neighbor. The leftmost field is considered
    the neightbor of the rightmost field.
    Examples:
    fair_sharer([0, 1000, 800, 0], 1) --> [100, 800, 900, 0]
    fair_sharer([0, 1000, 800, 0], 2) --> [100, 890, 720, 90]
    Args
    values:
    num_iteration:
    1D array of values (list or numpy array)
    Integer to set the number of iterations
    """
    #get the length of the list
    length_list = len(values)
    
    #if the list is empty, return it without doing something to it
    if length_list == 0:
        print('The list was empty!')
        return values

    for _ in range(num_iterations):
        #find the highest value and the index of the highest value
        max_index = values.index(max(values))
        max_value = values[max_index]
        
        # find out how much needs to be distributed and subtract from the highest value
        distributed_value = max_value * share
        values[max_index] -= 2 * distributed_value

        #find the left and right neighbour of the highest 
        left_neighbor = (max_index - 1) % length_list
        right_neighbor = (max_index + 1) % length_list

        #add the value to the neighboring numbers
        values[left_neighbor] += distributed_value
        values[right_neighbor] += distributed_value
    
    
    return values




